<?php

namespace backend\modules\kehoach\models;

use backend\models\Orders;
use backend\models\OrderInfo;
use backend\models\SubOrderInfo;
use backend\models\Schedule;
use backend\models\Content;
use backend\models\User;


use Yii;


class Kehoach extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'qli_kehoach';
    }

    const UUTIEN_THAP = 1;
    const UUTIEN_BINHTHUONG = 2;
    const UUTIEN_CAO = 3;

    /**
     * @inheritdoc
     */
    const CHUANHAN = 1;
    const CHUAHOANTHANH = 2;
    const DAHOANTHANH = 3;
    
    public function rules()
    {
        return [
            [['code', 'trang_thai'], 'required'],
            [['muc_do', 'id_don_hang', 'id_san_pham', 'trang_thai','san_pham_ghep','cong_doan_hien_tai'], 'integer'],
            [['ngay_san_xuat', 'ngay_giao_hang'], 'safe'],
            [['code'], 'string', 'max' => 25],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'kehoach_id' => 'Kehoach ID',
            'code' => 'Mã kế hoạch',
            'muc_do' => 'Mức độ ưu tiên',
            'id_don_hang' => 'Đơn hàng',
            'id_san_pham' => 'Sản phẩm',
            'ngay_san_xuat' => 'Ngày sản xuất',
            'ngay_giao_hang' => 'Ngày giao hàng',
            'trang_thai' => 'Trạng thái',
            'san_pham_ghep' => 'Sản phẩm ghép',
            'cong_doan_hien_tai' => 'Công đoạn hiện tại',
        ];
    }


    public function afterFind()
    {           
        if(!empty($this->ngay_san_xuat)) $this->ngay_san_xuat = date('H:i d-m-Y',strtotime($this->ngay_san_xuat));
        if(!empty($this->ngay_giao_hang)) $this->ngay_giao_hang = date('H:i d-m-Y',strtotime($this->ngay_giao_hang));

        if(empty($this->cong_doan_hien_tai)) $this->cong_doan_hien_tai = 0;

        // echo '<pre>';
        // print_r($this);
        // echo '</pre>';die;

        parent::afterFind();
    }



     public function beforeSave($insert)
    {    
        if(empty($this->trang_thai)) $this->trang_thai = self::CHUANHAN;
        
        if(empty($this->cong_doan_hien_tai)) $this->cong_doan_hien_tai = 0;

        if(!empty($this->ngay_san_xuat)) $this->ngay_san_xuat = date('Y-m-d H:i:s',strtotime($this->ngay_san_xuat));
        if(!empty($this->ngay_giao_hang)) $this->ngay_giao_hang = date('Y-m-d H:i:s',strtotime($this->ngay_giao_hang));
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }


    public static function capnhattrangthai($kehoach)
    {
        $kh_tt_chuanhan = KehoachCongdoan::find()->andWhere(['id_ke_hoach' => $kehoach,'trang_thai' => KehoachCongdoan::CHUANHAN])->exists();
        $kh_tt_danglam = KehoachCongdoan::find()->andWhere(['id_ke_hoach' => $kehoach,'trang_thai' => KehoachCongdoan::DANGLAM])->exists();
        $kh_tt_hoanthanh = KehoachCongdoan::find()->andWhere(['id_ke_hoach' => $kehoach,'trang_thai' => KehoachCongdoan::HOANTHANH])->exists();
        $kh_tt_sualoi = KehoachCongdoan::find()->andWhere(['id_ke_hoach' => $kehoach,'trang_thai' => KehoachCongdoan::SUALOI])->exists();

        $kh_tt = null;
        if(!$kh_tt_chuanhan && !$kh_tt_danglam && !$kh_tt_sualoi){
            $kh_tt = Kehoach::DAHOANTHANH;
        }
        elseif(!$kh_tt_danglam && !$kh_tt_sualoi && !$kh_tt_hoanthanh){
            $kh_tt = Kehoach::CHUANHAN;
        }else{
            $kh_tt = Kehoach::CHUAHOANTHANH;
        }
        Kehoach::updateAll(['trang_thai' => $kh_tt],['kehoach_id' => $kehoach]);
    }



    public static function getTrangthaiOptions()
    {
        return [
            self::CHUANHAN => 'Chưa nhận',
            self::CHUAHOANTHANH => 'Chưa hoàn thành',
            self::DAHOANTHANH => 'Đã hoàn thành',            
        ];
    }

    public static function getTrangthaiLabel($value = '')
    {
        $array = self::getTrangthaiOptions();
        if ($value === null || !array_key_exists($value, $array))
            return '';
        return $array[$value];
    }
   

     public static function getCongdoanOption()
    {
        return Schedule::congDoanSanXuat();
    }
    


    public static function getCongdoanLabel($value = '')
    {
        $array = $array = self::getCongdoanOption();
        if ($value === null || !array_key_exists($value, $array))
            return '';
        return $array[$value];
    }
    


    public static function getLoaiGiay($id)
    {
        $content = Content::findOne($id);
        if(!empty($content))
            return $content->title;
        else
            return '';
    }

    public function getSanpham()
    {        
        return $this->san_pham_ghep == 1 ? $this->hasOne(SubOrderInfo::className(), ['info_id' => 'id_san_pham']) : $this->hasOne(OrderInfo::className(), ['info_id' => 'id_san_pham']);
    }

    public function getTensanpham()
    {
        $_sanpham = $this->sanpham;
        
        $return = !empty($_sanpham->product_name) ? '<strong>'.$_sanpham->product_name.'</strong>' : '';
        $return .= !empty($_sanpham->product->title) ? (!empty($return) ? ' - ' : '').'<strong>'.$_sanpham->product->title.'</strong>' : '';
        $return .= (!empty($return) ? '<br>' : '').'Khổ '.$_sanpham->length .' x '.$_sanpham->width;
        $return .= !empty($return) && !empty($_sanpham->inner_page_amount) ? '<br>' . $_sanpham->inner_page_amount .' trang '. Kehoach::getLoaiGiay($_sanpham->paper->GiayBiaChatLieu) : '';
        return $return;
    }


    public function getTensanpham_none()
    {
        $_sanpham = $this->sanpham;
        
        $return = !empty($_sanpham->product_name) ? $_sanpham->product_name : '';
        $return .= !empty($_sanpham->product->title) ? (!empty($return) ? ' - ' : '').$_sanpham->product->title : '';
        $return .= (!empty($return) ? "\n" : '').'Khổ '.$_sanpham->length .' x '.$_sanpham->width;
        $return .= !empty($return) && !empty($_sanpham->inner_page_amount) ? "\n" . $_sanpham->inner_page_amount .' trang '. Kehoach::getLoaiGiay($_sanpham->paper->GiayBiaChatLieu) : '';
        return $return;
    }




    public static function getMucdouutienOptions()
    {
        return [
            self::UUTIEN_THAP => 'Thấp',
            self::UUTIEN_BINHTHUONG => 'Bình thường',
            self::UUTIEN_CAO => 'Cao',
        ];
    }

    public static function getMucdouutienLabel($value = '')
    {
        $array = self::getMucdouutienOptions();
        if ($value === null || !array_key_exists($value, $array))
            return '';
        return $array[$value];
    }

    public static function getMucdouutienColor($value = '')
    {
        $array = [
            self::UUTIEN_THAP => 'btn-default',
            self::UUTIEN_BINHTHUONG => 'btn-dropbox',
            self::UUTIEN_CAO => 'btn-pinterest',
        ];        
        if ($value === null || !array_key_exists($value, $array))
            return '';
        return $array[$value];
    }



     public static function getOrdersOptions()
    {
        $settings = Yii::$app->settings;
        $list_status = Orders::definedOrderStatus();
        $status_ = [];

        if(!empty($list_status)){
            foreach ($list_status as $k => $v){
                if($settings->get("order_status_{$k}_khsx"))
                    $status_[] = $k;
            }
        }

        $orders = Orders::find()
            ->alias('t')
            ->joinWith([ 'info' => function ($q) {
                $q->alias('info');
            }])
        ->orderBy(['t.create_time' => SORT_DESC])->andWhere(['IN', 'info.status', $status_])->andWhere(['=', 'info.type_order', Yii::$app->settings->get('cach_tinh_gia')])->all();

        if ($orders) {

            $arr_order = [];
            foreach ($orders as $item) {
                $info = $item->info;
                $customer = $info->customer;
                $arr_order[$item->order_id] = (isset($item->orderinfo[0]->infoCode) ? $item->orderinfo[0]->infoCode : '') . (isset($customer->name) ? ' - '.$customer->name : '');
            }

            return $arr_order;
        }

        return [];
    }



    public static function getProductOptions($order_id = 0, $dataOption = false)
    {

        $order = Orders::findOne($order_id);
        if ($order) {
            $product_name = isset($order->info->product_name) ? $order->info->product_name : '';
            $product_name .= isset($order->info->product->title) ? (!empty($product_name) ? ' - ' : '').$order->info->product->title : '';
            if(isset($order->info->info_id)) {
                $arr_order[$order->info->info_id] = $product_name;
                $arr_data[$order->info->info_id] = ['data-ghep' => 0];
            }else{
                $arr_order = [];
                $arr_data = [];
            }

            if(isset($order->sanPhamGhep) && !empty($order->sanPhamGhep)) {
                foreach ($order->sanPhamGhep as $item) {
                    $product_name = isset($item->info->product_name) ? $item->info->product_name : '';
                    $product_name .= isset($item->info->product->title) ? (!empty($product_name) ? ' - ' : '').$item->info->product->title : '';
                    $arr_order[$item->info->info_id] = $product_name;
                    $arr_data[$item->info->info_id] = ['data-ghep' => 1];
                }
            }

            return $dataOption ? $arr_data : $arr_order;
        }

        return [];
    }










    public function getDonhang()
    {
        return $this->hasOne(Orders::className(), ['order_id' => 'id_don_hang']);
    }


    public function getCongdoan()
    {
        return $this->hasMany(KehoachCongdoan::className(), ['id_ke_hoach' => 'kehoach_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getGiaoviec()
    {
        return $this->hasMany(KehoachGiaoviec::className(), ['id_cong_doan' => 'id_cong_doan', 'id_ke_hoach' => 'id_ke_hoach'])->viaTable('qli_kehoach_congdoan',['id_ke_hoach' => 'kehoach_id']);
    }
}
